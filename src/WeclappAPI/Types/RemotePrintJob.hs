-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema RemotePrintJob
module WeclappAPI.Types.RemotePrintJob where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified WeclappAPI.Common
import WeclappAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.remotePrintJob@ in the specification.
-- 
-- 
data RemotePrintJob = RemotePrintJob {
  -- | createdDate
  remotePrintJobCreatedDate :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | documentId
  , remotePrintJobDocumentId :: Data.Text.Internal.Text
  -- | id
  , remotePrintJobId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | lastModifiedDate
  , remotePrintJobLastModifiedDate :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | printStatus
  , remotePrintJobPrintStatus :: RemotePrintJobPrintStatus'
  -- | printerName
  , remotePrintJobPrinterName :: Data.Text.Internal.Text
  -- | quantity
  , remotePrintJobQuantity :: GHC.Int.Int32
  -- | userId
  , remotePrintJobUserId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | version
  , remotePrintJobVersion :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | weclappOsHardwareId
  , remotePrintJobWeclappOsHardwareId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | weclappOsId
  , remotePrintJobWeclappOsId :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON RemotePrintJob
    where toJSON obj = Data.Aeson.Types.Internal.object ("createdDate" Data.Aeson.Types.ToJSON..= remotePrintJobCreatedDate obj : "documentId" Data.Aeson.Types.ToJSON..= remotePrintJobDocumentId obj : "id" Data.Aeson.Types.ToJSON..= remotePrintJobId obj : "lastModifiedDate" Data.Aeson.Types.ToJSON..= remotePrintJobLastModifiedDate obj : "printStatus" Data.Aeson.Types.ToJSON..= remotePrintJobPrintStatus obj : "printerName" Data.Aeson.Types.ToJSON..= remotePrintJobPrinterName obj : "quantity" Data.Aeson.Types.ToJSON..= remotePrintJobQuantity obj : "userId" Data.Aeson.Types.ToJSON..= remotePrintJobUserId obj : "version" Data.Aeson.Types.ToJSON..= remotePrintJobVersion obj : "weclappOsHardwareId" Data.Aeson.Types.ToJSON..= remotePrintJobWeclappOsHardwareId obj : "weclappOsId" Data.Aeson.Types.ToJSON..= remotePrintJobWeclappOsId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("createdDate" Data.Aeson.Types.ToJSON..= remotePrintJobCreatedDate obj) GHC.Base.<> (("documentId" Data.Aeson.Types.ToJSON..= remotePrintJobDocumentId obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= remotePrintJobId obj) GHC.Base.<> (("lastModifiedDate" Data.Aeson.Types.ToJSON..= remotePrintJobLastModifiedDate obj) GHC.Base.<> (("printStatus" Data.Aeson.Types.ToJSON..= remotePrintJobPrintStatus obj) GHC.Base.<> (("printerName" Data.Aeson.Types.ToJSON..= remotePrintJobPrinterName obj) GHC.Base.<> (("quantity" Data.Aeson.Types.ToJSON..= remotePrintJobQuantity obj) GHC.Base.<> (("userId" Data.Aeson.Types.ToJSON..= remotePrintJobUserId obj) GHC.Base.<> (("version" Data.Aeson.Types.ToJSON..= remotePrintJobVersion obj) GHC.Base.<> (("weclappOsHardwareId" Data.Aeson.Types.ToJSON..= remotePrintJobWeclappOsHardwareId obj) GHC.Base.<> ("weclappOsId" Data.Aeson.Types.ToJSON..= remotePrintJobWeclappOsId obj)))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON RemotePrintJob
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "RemotePrintJob" (\obj -> ((((((((((GHC.Base.pure RemotePrintJob GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "createdDate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "documentId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "lastModifiedDate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "printStatus")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "printerName")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "userId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "version")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "weclappOsHardwareId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "weclappOsId"))
-- | Create a new 'RemotePrintJob' with all required fields.
mkRemotePrintJob :: Data.Text.Internal.Text -- ^ 'remotePrintJobDocumentId'
  -> RemotePrintJobPrintStatus' -- ^ 'remotePrintJobPrintStatus'
  -> Data.Text.Internal.Text -- ^ 'remotePrintJobPrinterName'
  -> GHC.Int.Int32 -- ^ 'remotePrintJobQuantity'
  -> Data.Text.Internal.Text -- ^ 'remotePrintJobWeclappOsId'
  -> RemotePrintJob
mkRemotePrintJob remotePrintJobDocumentId remotePrintJobPrintStatus remotePrintJobPrinterName remotePrintJobQuantity remotePrintJobWeclappOsId = RemotePrintJob{remotePrintJobCreatedDate = GHC.Maybe.Nothing,
                                                                                                                                                                remotePrintJobDocumentId = remotePrintJobDocumentId,
                                                                                                                                                                remotePrintJobId = GHC.Maybe.Nothing,
                                                                                                                                                                remotePrintJobLastModifiedDate = GHC.Maybe.Nothing,
                                                                                                                                                                remotePrintJobPrintStatus = remotePrintJobPrintStatus,
                                                                                                                                                                remotePrintJobPrinterName = remotePrintJobPrinterName,
                                                                                                                                                                remotePrintJobQuantity = remotePrintJobQuantity,
                                                                                                                                                                remotePrintJobUserId = GHC.Maybe.Nothing,
                                                                                                                                                                remotePrintJobVersion = GHC.Maybe.Nothing,
                                                                                                                                                                remotePrintJobWeclappOsHardwareId = GHC.Maybe.Nothing,
                                                                                                                                                                remotePrintJobWeclappOsId = remotePrintJobWeclappOsId}
-- | Defines the enum schema located at @components.schemas.remotePrintJob.properties.printStatus@ in the specification.
-- 
-- 
data RemotePrintJobPrintStatus' =
   RemotePrintJobPrintStatus'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | RemotePrintJobPrintStatus'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | RemotePrintJobPrintStatus'EnumDOCUMENT_NOT_FOUND -- ^ Represents the JSON value @"DOCUMENT_NOT_FOUND"@
  | RemotePrintJobPrintStatus'EnumERROR -- ^ Represents the JSON value @"ERROR"@
  | RemotePrintJobPrintStatus'EnumNEW -- ^ Represents the JSON value @"NEW"@
  | RemotePrintJobPrintStatus'EnumPRINTED -- ^ Represents the JSON value @"PRINTED"@
  | RemotePrintJobPrintStatus'EnumSUBMITTED -- ^ Represents the JSON value @"SUBMITTED"@
  | RemotePrintJobPrintStatus'EnumUNKNOWN_PRINTER -- ^ Represents the JSON value @"UNKNOWN_PRINTER"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON RemotePrintJobPrintStatus'
    where toJSON (RemotePrintJobPrintStatus'Other val) = val
          toJSON (RemotePrintJobPrintStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (RemotePrintJobPrintStatus'EnumDOCUMENT_NOT_FOUND) = "DOCUMENT_NOT_FOUND"
          toJSON (RemotePrintJobPrintStatus'EnumERROR) = "ERROR"
          toJSON (RemotePrintJobPrintStatus'EnumNEW) = "NEW"
          toJSON (RemotePrintJobPrintStatus'EnumPRINTED) = "PRINTED"
          toJSON (RemotePrintJobPrintStatus'EnumSUBMITTED) = "SUBMITTED"
          toJSON (RemotePrintJobPrintStatus'EnumUNKNOWN_PRINTER) = "UNKNOWN_PRINTER"
instance Data.Aeson.Types.FromJSON.FromJSON RemotePrintJobPrintStatus'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "DOCUMENT_NOT_FOUND" -> RemotePrintJobPrintStatus'EnumDOCUMENT_NOT_FOUND
                                            | val GHC.Classes.== "ERROR" -> RemotePrintJobPrintStatus'EnumERROR
                                            | val GHC.Classes.== "NEW" -> RemotePrintJobPrintStatus'EnumNEW
                                            | val GHC.Classes.== "PRINTED" -> RemotePrintJobPrintStatus'EnumPRINTED
                                            | val GHC.Classes.== "SUBMITTED" -> RemotePrintJobPrintStatus'EnumSUBMITTED
                                            | val GHC.Classes.== "UNKNOWN_PRINTER" -> RemotePrintJobPrintStatus'EnumUNKNOWN_PRINTER
                                            | GHC.Base.otherwise -> RemotePrintJobPrintStatus'Other val)
