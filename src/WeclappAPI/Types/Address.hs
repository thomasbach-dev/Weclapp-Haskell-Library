-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Address
module WeclappAPI.Types.Address where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified WeclappAPI.Common
import WeclappAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.address@ in the specification.
-- 
-- 
data Address = Address {
  -- | city
  addressCity :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | company
  , addressCompany :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | company2
  , addressCompany2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | countryCode
  , addressCountryCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | createdDate
  , addressCreatedDate :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | deliveryAddress
  , addressDeliveryAddress :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | firstName
  , addressFirstName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | globalLocationNumber
  , addressGlobalLocationNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | id
  , addressId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | invoiceAddress
  , addressInvoiceAddress :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | lastModifiedDate
  , addressLastModifiedDate :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | lastName
  , addressLastName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | phoneNumber
  , addressPhoneNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | postOfficeBoxCity
  , addressPostOfficeBoxCity :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | postOfficeBoxNumber
  , addressPostOfficeBoxNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | postOfficeBoxZipCode
  , addressPostOfficeBoxZipCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | primeAddress
  , addressPrimeAddress :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | salutation
  , addressSalutation :: (GHC.Maybe.Maybe AddressSalutation')
  -- | state
  , addressState :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | street1
  , addressStreet1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | street2
  , addressStreet2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | title
  , addressTitle :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | titleId
  , addressTitleId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | version
  , addressVersion :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | zipcode
  , addressZipcode :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Address
    where toJSON obj = Data.Aeson.Types.Internal.object ("city" Data.Aeson.Types.ToJSON..= addressCity obj : "company" Data.Aeson.Types.ToJSON..= addressCompany obj : "company2" Data.Aeson.Types.ToJSON..= addressCompany2 obj : "countryCode" Data.Aeson.Types.ToJSON..= addressCountryCode obj : "createdDate" Data.Aeson.Types.ToJSON..= addressCreatedDate obj : "deliveryAddress" Data.Aeson.Types.ToJSON..= addressDeliveryAddress obj : "firstName" Data.Aeson.Types.ToJSON..= addressFirstName obj : "globalLocationNumber" Data.Aeson.Types.ToJSON..= addressGlobalLocationNumber obj : "id" Data.Aeson.Types.ToJSON..= addressId obj : "invoiceAddress" Data.Aeson.Types.ToJSON..= addressInvoiceAddress obj : "lastModifiedDate" Data.Aeson.Types.ToJSON..= addressLastModifiedDate obj : "lastName" Data.Aeson.Types.ToJSON..= addressLastName obj : "phoneNumber" Data.Aeson.Types.ToJSON..= addressPhoneNumber obj : "postOfficeBoxCity" Data.Aeson.Types.ToJSON..= addressPostOfficeBoxCity obj : "postOfficeBoxNumber" Data.Aeson.Types.ToJSON..= addressPostOfficeBoxNumber obj : "postOfficeBoxZipCode" Data.Aeson.Types.ToJSON..= addressPostOfficeBoxZipCode obj : "primeAddress" Data.Aeson.Types.ToJSON..= addressPrimeAddress obj : "salutation" Data.Aeson.Types.ToJSON..= addressSalutation obj : "state" Data.Aeson.Types.ToJSON..= addressState obj : "street1" Data.Aeson.Types.ToJSON..= addressStreet1 obj : "street2" Data.Aeson.Types.ToJSON..= addressStreet2 obj : "title" Data.Aeson.Types.ToJSON..= addressTitle obj : "titleId" Data.Aeson.Types.ToJSON..= addressTitleId obj : "version" Data.Aeson.Types.ToJSON..= addressVersion obj : "zipcode" Data.Aeson.Types.ToJSON..= addressZipcode obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("city" Data.Aeson.Types.ToJSON..= addressCity obj) GHC.Base.<> (("company" Data.Aeson.Types.ToJSON..= addressCompany obj) GHC.Base.<> (("company2" Data.Aeson.Types.ToJSON..= addressCompany2 obj) GHC.Base.<> (("countryCode" Data.Aeson.Types.ToJSON..= addressCountryCode obj) GHC.Base.<> (("createdDate" Data.Aeson.Types.ToJSON..= addressCreatedDate obj) GHC.Base.<> (("deliveryAddress" Data.Aeson.Types.ToJSON..= addressDeliveryAddress obj) GHC.Base.<> (("firstName" Data.Aeson.Types.ToJSON..= addressFirstName obj) GHC.Base.<> (("globalLocationNumber" Data.Aeson.Types.ToJSON..= addressGlobalLocationNumber obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= addressId obj) GHC.Base.<> (("invoiceAddress" Data.Aeson.Types.ToJSON..= addressInvoiceAddress obj) GHC.Base.<> (("lastModifiedDate" Data.Aeson.Types.ToJSON..= addressLastModifiedDate obj) GHC.Base.<> (("lastName" Data.Aeson.Types.ToJSON..= addressLastName obj) GHC.Base.<> (("phoneNumber" Data.Aeson.Types.ToJSON..= addressPhoneNumber obj) GHC.Base.<> (("postOfficeBoxCity" Data.Aeson.Types.ToJSON..= addressPostOfficeBoxCity obj) GHC.Base.<> (("postOfficeBoxNumber" Data.Aeson.Types.ToJSON..= addressPostOfficeBoxNumber obj) GHC.Base.<> (("postOfficeBoxZipCode" Data.Aeson.Types.ToJSON..= addressPostOfficeBoxZipCode obj) GHC.Base.<> (("primeAddress" Data.Aeson.Types.ToJSON..= addressPrimeAddress obj) GHC.Base.<> (("salutation" Data.Aeson.Types.ToJSON..= addressSalutation obj) GHC.Base.<> (("state" Data.Aeson.Types.ToJSON..= addressState obj) GHC.Base.<> (("street1" Data.Aeson.Types.ToJSON..= addressStreet1 obj) GHC.Base.<> (("street2" Data.Aeson.Types.ToJSON..= addressStreet2 obj) GHC.Base.<> (("title" Data.Aeson.Types.ToJSON..= addressTitle obj) GHC.Base.<> (("titleId" Data.Aeson.Types.ToJSON..= addressTitleId obj) GHC.Base.<> (("version" Data.Aeson.Types.ToJSON..= addressVersion obj) GHC.Base.<> ("zipcode" Data.Aeson.Types.ToJSON..= addressZipcode obj)))))))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Address
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Address" (\obj -> ((((((((((((((((((((((((GHC.Base.pure Address GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "company")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "company2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "countryCode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "createdDate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "deliveryAddress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "firstName")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "globalLocationNumber")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "invoiceAddress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "lastModifiedDate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "lastName")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "phoneNumber")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postOfficeBoxCity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postOfficeBoxNumber")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postOfficeBoxZipCode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "primeAddress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "salutation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "street1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "street2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "title")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "titleId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "version")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "zipcode"))
-- | Create a new 'Address' with all required fields.
mkAddress :: Address
mkAddress = Address{addressCity = GHC.Maybe.Nothing,
                    addressCompany = GHC.Maybe.Nothing,
                    addressCompany2 = GHC.Maybe.Nothing,
                    addressCountryCode = GHC.Maybe.Nothing,
                    addressCreatedDate = GHC.Maybe.Nothing,
                    addressDeliveryAddress = GHC.Maybe.Nothing,
                    addressFirstName = GHC.Maybe.Nothing,
                    addressGlobalLocationNumber = GHC.Maybe.Nothing,
                    addressId = GHC.Maybe.Nothing,
                    addressInvoiceAddress = GHC.Maybe.Nothing,
                    addressLastModifiedDate = GHC.Maybe.Nothing,
                    addressLastName = GHC.Maybe.Nothing,
                    addressPhoneNumber = GHC.Maybe.Nothing,
                    addressPostOfficeBoxCity = GHC.Maybe.Nothing,
                    addressPostOfficeBoxNumber = GHC.Maybe.Nothing,
                    addressPostOfficeBoxZipCode = GHC.Maybe.Nothing,
                    addressPrimeAddress = GHC.Maybe.Nothing,
                    addressSalutation = GHC.Maybe.Nothing,
                    addressState = GHC.Maybe.Nothing,
                    addressStreet1 = GHC.Maybe.Nothing,
                    addressStreet2 = GHC.Maybe.Nothing,
                    addressTitle = GHC.Maybe.Nothing,
                    addressTitleId = GHC.Maybe.Nothing,
                    addressVersion = GHC.Maybe.Nothing,
                    addressZipcode = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.address.properties.salutation@ in the specification.
-- 
-- 
data AddressSalutation' =
   AddressSalutation'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | AddressSalutation'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | AddressSalutation'EnumCOMPANY -- ^ Represents the JSON value @"COMPANY"@
  | AddressSalutation'EnumFAMILY -- ^ Represents the JSON value @"FAMILY"@
  | AddressSalutation'EnumMR -- ^ Represents the JSON value @"MR"@
  | AddressSalutation'EnumMRS -- ^ Represents the JSON value @"MRS"@
  | AddressSalutation'EnumNO_SALUTATION -- ^ Represents the JSON value @"NO_SALUTATION"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON AddressSalutation'
    where toJSON (AddressSalutation'Other val) = val
          toJSON (AddressSalutation'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (AddressSalutation'EnumCOMPANY) = "COMPANY"
          toJSON (AddressSalutation'EnumFAMILY) = "FAMILY"
          toJSON (AddressSalutation'EnumMR) = "MR"
          toJSON (AddressSalutation'EnumMRS) = "MRS"
          toJSON (AddressSalutation'EnumNO_SALUTATION) = "NO_SALUTATION"
instance Data.Aeson.Types.FromJSON.FromJSON AddressSalutation'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "COMPANY" -> AddressSalutation'EnumCOMPANY
                                            | val GHC.Classes.== "FAMILY" -> AddressSalutation'EnumFAMILY
                                            | val GHC.Classes.== "MR" -> AddressSalutation'EnumMR
                                            | val GHC.Classes.== "MRS" -> AddressSalutation'EnumMRS
                                            | val GHC.Classes.== "NO_SALUTATION" -> AddressSalutation'EnumNO_SALUTATION
                                            | GHC.Base.otherwise -> AddressSalutation'Other val)
