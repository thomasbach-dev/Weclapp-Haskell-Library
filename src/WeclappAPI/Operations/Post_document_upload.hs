-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation post_document_upload
module WeclappAPI.Operations.Post_document_upload where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified WeclappAPI.Common
import WeclappAPI.Types

-- | > POST /document/upload
-- 
-- 
post_document_upload :: forall m . WeclappAPI.Common.MonadHTTP m => Post_document_uploadParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> WeclappAPI.Common.ClientT m (Network.HTTP.Client.Types.Response Post_document_uploadResponse) -- ^ Monadic computation which returns the result of the operation
post_document_upload parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Post_document_uploadResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Post_document_uploadResponse200
                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (WeclappAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/document/upload") [WeclappAPI.Common.QueryParameter (Data.Text.pack "entityName") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_document_uploadParametersQueryEntityName parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                      WeclappAPI.Common.QueryParameter (Data.Text.pack "entityId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_document_uploadParametersQueryEntityId parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                      WeclappAPI.Common.QueryParameter (Data.Text.pack "name") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_document_uploadParametersQueryName parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                      WeclappAPI.Common.QueryParameter (Data.Text.pack "description") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> post_document_uploadParametersQueryDescription parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/document\/upload.POST.parameters@ in the specification.
-- 
-- 
data Post_document_uploadParameters = Post_document_uploadParameters {
  -- | queryDescription: Represents the parameter named \'description\'
  post_document_uploadParametersQueryDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | queryEntityId: Represents the parameter named \'entityId\'
  , post_document_uploadParametersQueryEntityId :: Data.Text.Internal.Text
  -- | queryEntityName: Represents the parameter named \'entityName\'
  , post_document_uploadParametersQueryEntityName :: Data.Text.Internal.Text
  -- | queryName: Represents the parameter named \'name\'
  , post_document_uploadParametersQueryName :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Post_document_uploadParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("queryDescription" Data.Aeson.Types.ToJSON..= post_document_uploadParametersQueryDescription obj : "queryEntityId" Data.Aeson.Types.ToJSON..= post_document_uploadParametersQueryEntityId obj : "queryEntityName" Data.Aeson.Types.ToJSON..= post_document_uploadParametersQueryEntityName obj : "queryName" Data.Aeson.Types.ToJSON..= post_document_uploadParametersQueryName obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("queryDescription" Data.Aeson.Types.ToJSON..= post_document_uploadParametersQueryDescription obj) GHC.Base.<> (("queryEntityId" Data.Aeson.Types.ToJSON..= post_document_uploadParametersQueryEntityId obj) GHC.Base.<> (("queryEntityName" Data.Aeson.Types.ToJSON..= post_document_uploadParametersQueryEntityName obj) GHC.Base.<> ("queryName" Data.Aeson.Types.ToJSON..= post_document_uploadParametersQueryName obj))))
instance Data.Aeson.Types.FromJSON.FromJSON Post_document_uploadParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Post_document_uploadParameters" (\obj -> (((GHC.Base.pure Post_document_uploadParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryDescription")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryEntityId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryEntityName")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryName"))
-- | Create a new 'Post_document_uploadParameters' with all required fields.
mkPost_document_uploadParameters :: Data.Text.Internal.Text -- ^ 'post_document_uploadParametersQueryEntityId'
  -> Data.Text.Internal.Text -- ^ 'post_document_uploadParametersQueryEntityName'
  -> Data.Text.Internal.Text -- ^ 'post_document_uploadParametersQueryName'
  -> Post_document_uploadParameters
mkPost_document_uploadParameters post_document_uploadParametersQueryEntityId post_document_uploadParametersQueryEntityName post_document_uploadParametersQueryName = Post_document_uploadParameters{post_document_uploadParametersQueryDescription = GHC.Maybe.Nothing,
                                                                                                                                                                                                    post_document_uploadParametersQueryEntityId = post_document_uploadParametersQueryEntityId,
                                                                                                                                                                                                    post_document_uploadParametersQueryEntityName = post_document_uploadParametersQueryEntityName,
                                                                                                                                                                                                    post_document_uploadParametersQueryName = post_document_uploadParametersQueryName}
-- | Represents a response of the operation 'post_document_upload'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Post_document_uploadResponseError' is used.
data Post_document_uploadResponse =
   Post_document_uploadResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Post_document_uploadResponse200 -- ^ upload response
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | > POST /document/upload
-- 
-- The same as 'post_document_upload' but accepts an explicit configuration.
post_document_uploadWithConfiguration :: forall m . WeclappAPI.Common.MonadHTTP m => WeclappAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Post_document_uploadParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Post_document_uploadResponse) -- ^ Monadic computation which returns the result of the operation
post_document_uploadWithConfiguration config
                                      parameters = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either Post_document_uploadResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Post_document_uploadResponse200
                                                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (WeclappAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/document/upload") [WeclappAPI.Common.QueryParameter (Data.Text.pack "entityName") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_document_uploadParametersQueryEntityName parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                             WeclappAPI.Common.QueryParameter (Data.Text.pack "entityId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_document_uploadParametersQueryEntityId parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                             WeclappAPI.Common.QueryParameter (Data.Text.pack "name") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_document_uploadParametersQueryName parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                             WeclappAPI.Common.QueryParameter (Data.Text.pack "description") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> post_document_uploadParametersQueryDescription parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > POST /document/upload
-- 
-- The same as 'post_document_upload' but returns the raw 'Data.ByteString.Char8.ByteString'.
post_document_uploadRaw :: forall m . WeclappAPI.Common.MonadHTTP m => Post_document_uploadParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> WeclappAPI.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
post_document_uploadRaw parameters = GHC.Base.id (WeclappAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/document/upload") [WeclappAPI.Common.QueryParameter (Data.Text.pack "entityName") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_document_uploadParametersQueryEntityName parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                    WeclappAPI.Common.QueryParameter (Data.Text.pack "entityId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_document_uploadParametersQueryEntityId parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                    WeclappAPI.Common.QueryParameter (Data.Text.pack "name") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_document_uploadParametersQueryName parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                    WeclappAPI.Common.QueryParameter (Data.Text.pack "description") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> post_document_uploadParametersQueryDescription parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > POST /document/upload
-- 
-- The same as 'post_document_upload' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
post_document_uploadWithConfigurationRaw :: forall m . WeclappAPI.Common.MonadHTTP m => WeclappAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Post_document_uploadParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
post_document_uploadWithConfigurationRaw config
                                         parameters = GHC.Base.id (WeclappAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/document/upload") [WeclappAPI.Common.QueryParameter (Data.Text.pack "entityName") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_document_uploadParametersQueryEntityName parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                           WeclappAPI.Common.QueryParameter (Data.Text.pack "entityId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_document_uploadParametersQueryEntityId parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                           WeclappAPI.Common.QueryParameter (Data.Text.pack "name") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_document_uploadParametersQueryName parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                           WeclappAPI.Common.QueryParameter (Data.Text.pack "description") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> post_document_uploadParametersQueryDescription parameters) (Data.Text.pack "form") GHC.Types.False])
