-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation get_document_id__id__downloadDocumentVersion
module WeclappAPI.Operations.Get_document_id__id__downloadDocumentVersion where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified WeclappAPI.Common
import WeclappAPI.Types

-- | > GET /document/id/{id}/downloadDocumentVersion
-- 
-- 
get_document_id__id__downloadDocumentVersion :: forall m . WeclappAPI.Common.MonadHTTP m => Get_document_id__id__downloadDocumentVersionParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> WeclappAPI.Common.ClientT m (Network.HTTP.Client.Types.Response Get_document_id__id__downloadDocumentVersionResponse) -- ^ Monadic computation which returns the result of the operation
get_document_id__id__downloadDocumentVersion parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Get_document_id__id__downloadDocumentVersionResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Get_document_id__id__downloadDocumentVersionResponse200
                                                                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (WeclappAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/document/id/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ WeclappAPI.Common.stringifyModel (get_document_id__id__downloadDocumentVersionParametersPathId parameters))) GHC.Base.++ "/downloadDocumentVersion"))) [WeclappAPI.Common.QueryParameter (Data.Text.pack "id") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_document_id__id__downloadDocumentVersionParametersQueryId parameters)) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/document\/id\/{id}\/downloadDocumentVersion.GET.parameters@ in the specification.
-- 
-- 
data Get_document_id__id__downloadDocumentVersionParameters = Get_document_id__id__downloadDocumentVersionParameters {
  -- | pathId: Represents the parameter named \'id\'
  get_document_id__id__downloadDocumentVersionParametersPathId :: Data.Text.Internal.Text
  -- | queryId: Represents the parameter named \'id\'
  , get_document_id__id__downloadDocumentVersionParametersQueryId :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_document_id__id__downloadDocumentVersionParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathId" Data.Aeson.Types.ToJSON..= get_document_id__id__downloadDocumentVersionParametersPathId obj : "queryId" Data.Aeson.Types.ToJSON..= get_document_id__id__downloadDocumentVersionParametersQueryId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathId" Data.Aeson.Types.ToJSON..= get_document_id__id__downloadDocumentVersionParametersPathId obj) GHC.Base.<> ("queryId" Data.Aeson.Types.ToJSON..= get_document_id__id__downloadDocumentVersionParametersQueryId obj))
instance Data.Aeson.Types.FromJSON.FromJSON Get_document_id__id__downloadDocumentVersionParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_document_id__id__downloadDocumentVersionParameters" (\obj -> (GHC.Base.pure Get_document_id__id__downloadDocumentVersionParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryId"))
-- | Create a new 'Get_document_id__id__downloadDocumentVersionParameters' with all required fields.
mkGet_document_id__id__downloadDocumentVersionParameters :: Data.Text.Internal.Text -- ^ 'get_document_id__id__downloadDocumentVersionParametersPathId'
  -> Data.Text.Internal.Text -- ^ 'get_document_id__id__downloadDocumentVersionParametersQueryId'
  -> Get_document_id__id__downloadDocumentVersionParameters
mkGet_document_id__id__downloadDocumentVersionParameters get_document_id__id__downloadDocumentVersionParametersPathId get_document_id__id__downloadDocumentVersionParametersQueryId = Get_document_id__id__downloadDocumentVersionParameters{get_document_id__id__downloadDocumentVersionParametersPathId = get_document_id__id__downloadDocumentVersionParametersPathId,
                                                                                                                                                                                                                                             get_document_id__id__downloadDocumentVersionParametersQueryId = get_document_id__id__downloadDocumentVersionParametersQueryId}
-- | Represents a response of the operation 'get_document_id__id__downloadDocumentVersion'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Get_document_id__id__downloadDocumentVersionResponseError' is used.
data Get_document_id__id__downloadDocumentVersionResponse =
   Get_document_id__id__downloadDocumentVersionResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Get_document_id__id__downloadDocumentVersionResponse200 -- ^ downloadDocumentVersion response
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | > GET /document/id/{id}/downloadDocumentVersion
-- 
-- The same as 'get_document_id__id__downloadDocumentVersion' but accepts an explicit configuration.
get_document_id__id__downloadDocumentVersionWithConfiguration :: forall m . WeclappAPI.Common.MonadHTTP m => WeclappAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Get_document_id__id__downloadDocumentVersionParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Get_document_id__id__downloadDocumentVersionResponse) -- ^ Monadic computation which returns the result of the operation
get_document_id__id__downloadDocumentVersionWithConfiguration config
                                                              parameters = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either Get_document_id__id__downloadDocumentVersionResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Get_document_id__id__downloadDocumentVersionResponse200
                                                                                                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (WeclappAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/document/id/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ WeclappAPI.Common.stringifyModel (get_document_id__id__downloadDocumentVersionParametersPathId parameters))) GHC.Base.++ "/downloadDocumentVersion"))) [WeclappAPI.Common.QueryParameter (Data.Text.pack "id") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_document_id__id__downloadDocumentVersionParametersQueryId parameters)) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /document/id/{id}/downloadDocumentVersion
-- 
-- The same as 'get_document_id__id__downloadDocumentVersion' but returns the raw 'Data.ByteString.Char8.ByteString'.
get_document_id__id__downloadDocumentVersionRaw :: forall m . WeclappAPI.Common.MonadHTTP m => Get_document_id__id__downloadDocumentVersionParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> WeclappAPI.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_document_id__id__downloadDocumentVersionRaw parameters = GHC.Base.id (WeclappAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/document/id/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ WeclappAPI.Common.stringifyModel (get_document_id__id__downloadDocumentVersionParametersPathId parameters))) GHC.Base.++ "/downloadDocumentVersion"))) [WeclappAPI.Common.QueryParameter (Data.Text.pack "id") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_document_id__id__downloadDocumentVersionParametersQueryId parameters)) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /document/id/{id}/downloadDocumentVersion
-- 
-- The same as 'get_document_id__id__downloadDocumentVersion' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
get_document_id__id__downloadDocumentVersionWithConfigurationRaw :: forall m . WeclappAPI.Common.MonadHTTP m => WeclappAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Get_document_id__id__downloadDocumentVersionParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_document_id__id__downloadDocumentVersionWithConfigurationRaw config
                                                                 parameters = GHC.Base.id (WeclappAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/document/id/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ WeclappAPI.Common.stringifyModel (get_document_id__id__downloadDocumentVersionParametersPathId parameters))) GHC.Base.++ "/downloadDocumentVersion"))) [WeclappAPI.Common.QueryParameter (Data.Text.pack "id") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_document_id__id__downloadDocumentVersionParametersQueryId parameters)) (Data.Text.pack "form") GHC.Types.False])
