-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation post_productionOrder_fastProductionBooking
module WeclappAPI.Operations.Post_productionOrder_fastProductionBooking where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified WeclappAPI.Common
import WeclappAPI.Types

-- | > POST /productionOrder/fastProductionBooking
-- 
-- 
post_productionOrder_fastProductionBooking :: forall m . WeclappAPI.Common.MonadHTTP m => Post_productionOrder_fastProductionBookingRequestBody -- ^ The request body to send
  -> WeclappAPI.Common.ClientT m (Network.HTTP.Client.Types.Response Post_productionOrder_fastProductionBookingResponse) -- ^ Monadic computation which returns the result of the operation
post_productionOrder_fastProductionBooking body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Post_productionOrder_fastProductionBookingResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Post_productionOrder_fastProductionBookingResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Post_productionOrder_fastProductionBookingResponseBody200)
                                                                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (WeclappAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/productionOrder/fastProductionBooking") GHC.Base.mempty (GHC.Maybe.Just body) WeclappAPI.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/productionOrder\/fastProductionBooking.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data Post_productionOrder_fastProductionBookingRequestBody = Post_productionOrder_fastProductionBookingRequestBody {
  -- | productionOrderNumber
  post_productionOrder_fastProductionBookingRequestBodyProductionOrderNumber :: Data.Text.Internal.Text
  -- | quantity
  , post_productionOrder_fastProductionBookingRequestBodyQuantity :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Post_productionOrder_fastProductionBookingRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("productionOrderNumber" Data.Aeson.Types.ToJSON..= post_productionOrder_fastProductionBookingRequestBodyProductionOrderNumber obj : "quantity" Data.Aeson.Types.ToJSON..= post_productionOrder_fastProductionBookingRequestBodyQuantity obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("productionOrderNumber" Data.Aeson.Types.ToJSON..= post_productionOrder_fastProductionBookingRequestBodyProductionOrderNumber obj) GHC.Base.<> ("quantity" Data.Aeson.Types.ToJSON..= post_productionOrder_fastProductionBookingRequestBodyQuantity obj))
instance Data.Aeson.Types.FromJSON.FromJSON Post_productionOrder_fastProductionBookingRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Post_productionOrder_fastProductionBookingRequestBody" (\obj -> (GHC.Base.pure Post_productionOrder_fastProductionBookingRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "productionOrderNumber")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity"))
-- | Create a new 'Post_productionOrder_fastProductionBookingRequestBody' with all required fields.
mkPost_productionOrder_fastProductionBookingRequestBody :: Data.Text.Internal.Text -- ^ 'post_productionOrder_fastProductionBookingRequestBodyProductionOrderNumber'
  -> Data.Text.Internal.Text -- ^ 'post_productionOrder_fastProductionBookingRequestBodyQuantity'
  -> Post_productionOrder_fastProductionBookingRequestBody
mkPost_productionOrder_fastProductionBookingRequestBody post_productionOrder_fastProductionBookingRequestBodyProductionOrderNumber post_productionOrder_fastProductionBookingRequestBodyQuantity = Post_productionOrder_fastProductionBookingRequestBody{post_productionOrder_fastProductionBookingRequestBodyProductionOrderNumber = post_productionOrder_fastProductionBookingRequestBodyProductionOrderNumber,
                                                                                                                                                                                                                                                         post_productionOrder_fastProductionBookingRequestBodyQuantity = post_productionOrder_fastProductionBookingRequestBodyQuantity}
-- | Represents a response of the operation 'post_productionOrder_fastProductionBooking'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Post_productionOrder_fastProductionBookingResponseError' is used.
data Post_productionOrder_fastProductionBookingResponse =
   Post_productionOrder_fastProductionBookingResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Post_productionOrder_fastProductionBookingResponse200 Post_productionOrder_fastProductionBookingResponseBody200 -- ^ fastProductionBooking response
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/productionOrder\/fastProductionBooking.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data Post_productionOrder_fastProductionBookingResponseBody200 = Post_productionOrder_fastProductionBookingResponseBody200 {
  -- | result
  post_productionOrder_fastProductionBookingResponseBody200Result :: (GHC.Maybe.Maybe FastProductionBookingResult)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Post_productionOrder_fastProductionBookingResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("result" Data.Aeson.Types.ToJSON..= post_productionOrder_fastProductionBookingResponseBody200Result obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("result" Data.Aeson.Types.ToJSON..= post_productionOrder_fastProductionBookingResponseBody200Result obj)
instance Data.Aeson.Types.FromJSON.FromJSON Post_productionOrder_fastProductionBookingResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Post_productionOrder_fastProductionBookingResponseBody200" (\obj -> GHC.Base.pure Post_productionOrder_fastProductionBookingResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "result"))
-- | Create a new 'Post_productionOrder_fastProductionBookingResponseBody200' with all required fields.
mkPost_productionOrder_fastProductionBookingResponseBody200 :: Post_productionOrder_fastProductionBookingResponseBody200
mkPost_productionOrder_fastProductionBookingResponseBody200 = Post_productionOrder_fastProductionBookingResponseBody200{post_productionOrder_fastProductionBookingResponseBody200Result = GHC.Maybe.Nothing}
-- | > POST /productionOrder/fastProductionBooking
-- 
-- The same as 'post_productionOrder_fastProductionBooking' but accepts an explicit configuration.
post_productionOrder_fastProductionBookingWithConfiguration :: forall m . WeclappAPI.Common.MonadHTTP m => WeclappAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Post_productionOrder_fastProductionBookingRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Post_productionOrder_fastProductionBookingResponse) -- ^ Monadic computation which returns the result of the operation
post_productionOrder_fastProductionBookingWithConfiguration config
                                                            body = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either Post_productionOrder_fastProductionBookingResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Post_productionOrder_fastProductionBookingResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Post_productionOrder_fastProductionBookingResponseBody200)
                                                                                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (WeclappAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/productionOrder/fastProductionBooking") GHC.Base.mempty (GHC.Maybe.Just body) WeclappAPI.Common.RequestBodyEncodingJSON)
-- | > POST /productionOrder/fastProductionBooking
-- 
-- The same as 'post_productionOrder_fastProductionBooking' but returns the raw 'Data.ByteString.Char8.ByteString'.
post_productionOrder_fastProductionBookingRaw :: forall m . WeclappAPI.Common.MonadHTTP m => Post_productionOrder_fastProductionBookingRequestBody -- ^ The request body to send
  -> WeclappAPI.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
post_productionOrder_fastProductionBookingRaw body = GHC.Base.id (WeclappAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/productionOrder/fastProductionBooking") GHC.Base.mempty (GHC.Maybe.Just body) WeclappAPI.Common.RequestBodyEncodingJSON)
-- | > POST /productionOrder/fastProductionBooking
-- 
-- The same as 'post_productionOrder_fastProductionBooking' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
post_productionOrder_fastProductionBookingWithConfigurationRaw :: forall m . WeclappAPI.Common.MonadHTTP m => WeclappAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Post_productionOrder_fastProductionBookingRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
post_productionOrder_fastProductionBookingWithConfigurationRaw config
                                                               body = GHC.Base.id (WeclappAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/productionOrder/fastProductionBooking") GHC.Base.mempty (GHC.Maybe.Just body) WeclappAPI.Common.RequestBodyEncodingJSON)
