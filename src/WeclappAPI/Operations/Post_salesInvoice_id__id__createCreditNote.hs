-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation post_salesInvoice_id__id__createCreditNote
module WeclappAPI.Operations.Post_salesInvoice_id__id__createCreditNote where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified WeclappAPI.Common
import WeclappAPI.Types

-- | > POST /salesInvoice/id/{id}/createCreditNote
-- 
-- 
post_salesInvoice_id__id__createCreditNote :: forall m . WeclappAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ id
  -> Post_salesInvoice_id__id__createCreditNoteRequestBody -- ^ The request body to send
  -> WeclappAPI.Common.ClientT m (Network.HTTP.Client.Types.Response Post_salesInvoice_id__id__createCreditNoteResponse) -- ^ Monadic computation which returns the result of the operation
post_salesInvoice_id__id__createCreditNote id
                                           body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Post_salesInvoice_id__id__createCreditNoteResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Post_salesInvoice_id__id__createCreditNoteResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Post_salesInvoice_id__id__createCreditNoteResponseBody200)
                                                                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (WeclappAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/salesInvoice/id/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ WeclappAPI.Common.stringifyModel id)) GHC.Base.++ "/createCreditNote"))) GHC.Base.mempty (GHC.Maybe.Just body) WeclappAPI.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/salesInvoice\/id\/{id}\/createCreditNote.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data Post_salesInvoice_id__id__createCreditNoteRequestBody = Post_salesInvoice_id__id__createCreditNoteRequestBody {
  -- | itemIds
  post_salesInvoice_id__id__createCreditNoteRequestBodyItemIds :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Post_salesInvoice_id__id__createCreditNoteRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("itemIds" Data.Aeson.Types.ToJSON..= post_salesInvoice_id__id__createCreditNoteRequestBodyItemIds obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("itemIds" Data.Aeson.Types.ToJSON..= post_salesInvoice_id__id__createCreditNoteRequestBodyItemIds obj)
instance Data.Aeson.Types.FromJSON.FromJSON Post_salesInvoice_id__id__createCreditNoteRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Post_salesInvoice_id__id__createCreditNoteRequestBody" (\obj -> GHC.Base.pure Post_salesInvoice_id__id__createCreditNoteRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "itemIds"))
-- | Create a new 'Post_salesInvoice_id__id__createCreditNoteRequestBody' with all required fields.
mkPost_salesInvoice_id__id__createCreditNoteRequestBody :: Post_salesInvoice_id__id__createCreditNoteRequestBody
mkPost_salesInvoice_id__id__createCreditNoteRequestBody = Post_salesInvoice_id__id__createCreditNoteRequestBody{post_salesInvoice_id__id__createCreditNoteRequestBodyItemIds = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'post_salesInvoice_id__id__createCreditNote'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Post_salesInvoice_id__id__createCreditNoteResponseError' is used.
data Post_salesInvoice_id__id__createCreditNoteResponse =
   Post_salesInvoice_id__id__createCreditNoteResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Post_salesInvoice_id__id__createCreditNoteResponse200 Post_salesInvoice_id__id__createCreditNoteResponseBody200 -- ^ createCreditNote response
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/salesInvoice\/id\/{id}\/createCreditNote.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data Post_salesInvoice_id__id__createCreditNoteResponseBody200 = Post_salesInvoice_id__id__createCreditNoteResponseBody200 {
  -- | result
  post_salesInvoice_id__id__createCreditNoteResponseBody200Result :: (GHC.Maybe.Maybe SalesInvoice)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Post_salesInvoice_id__id__createCreditNoteResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("result" Data.Aeson.Types.ToJSON..= post_salesInvoice_id__id__createCreditNoteResponseBody200Result obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("result" Data.Aeson.Types.ToJSON..= post_salesInvoice_id__id__createCreditNoteResponseBody200Result obj)
instance Data.Aeson.Types.FromJSON.FromJSON Post_salesInvoice_id__id__createCreditNoteResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Post_salesInvoice_id__id__createCreditNoteResponseBody200" (\obj -> GHC.Base.pure Post_salesInvoice_id__id__createCreditNoteResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "result"))
-- | Create a new 'Post_salesInvoice_id__id__createCreditNoteResponseBody200' with all required fields.
mkPost_salesInvoice_id__id__createCreditNoteResponseBody200 :: Post_salesInvoice_id__id__createCreditNoteResponseBody200
mkPost_salesInvoice_id__id__createCreditNoteResponseBody200 = Post_salesInvoice_id__id__createCreditNoteResponseBody200{post_salesInvoice_id__id__createCreditNoteResponseBody200Result = GHC.Maybe.Nothing}
-- | > POST /salesInvoice/id/{id}/createCreditNote
-- 
-- The same as 'post_salesInvoice_id__id__createCreditNote' but accepts an explicit configuration.
post_salesInvoice_id__id__createCreditNoteWithConfiguration :: forall m . WeclappAPI.Common.MonadHTTP m => WeclappAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ id
  -> Post_salesInvoice_id__id__createCreditNoteRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Post_salesInvoice_id__id__createCreditNoteResponse) -- ^ Monadic computation which returns the result of the operation
post_salesInvoice_id__id__createCreditNoteWithConfiguration config
                                                            id
                                                            body = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either Post_salesInvoice_id__id__createCreditNoteResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Post_salesInvoice_id__id__createCreditNoteResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Post_salesInvoice_id__id__createCreditNoteResponseBody200)
                                                                                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (WeclappAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/salesInvoice/id/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ WeclappAPI.Common.stringifyModel id)) GHC.Base.++ "/createCreditNote"))) GHC.Base.mempty (GHC.Maybe.Just body) WeclappAPI.Common.RequestBodyEncodingJSON)
-- | > POST /salesInvoice/id/{id}/createCreditNote
-- 
-- The same as 'post_salesInvoice_id__id__createCreditNote' but returns the raw 'Data.ByteString.Char8.ByteString'.
post_salesInvoice_id__id__createCreditNoteRaw :: forall m . WeclappAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ id
  -> Post_salesInvoice_id__id__createCreditNoteRequestBody -- ^ The request body to send
  -> WeclappAPI.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
post_salesInvoice_id__id__createCreditNoteRaw id
                                              body = GHC.Base.id (WeclappAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/salesInvoice/id/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ WeclappAPI.Common.stringifyModel id)) GHC.Base.++ "/createCreditNote"))) GHC.Base.mempty (GHC.Maybe.Just body) WeclappAPI.Common.RequestBodyEncodingJSON)
-- | > POST /salesInvoice/id/{id}/createCreditNote
-- 
-- The same as 'post_salesInvoice_id__id__createCreditNote' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
post_salesInvoice_id__id__createCreditNoteWithConfigurationRaw :: forall m . WeclappAPI.Common.MonadHTTP m => WeclappAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ id
  -> Post_salesInvoice_id__id__createCreditNoteRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
post_salesInvoice_id__id__createCreditNoteWithConfigurationRaw config
                                                               id
                                                               body = GHC.Base.id (WeclappAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/salesInvoice/id/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ WeclappAPI.Common.stringifyModel id)) GHC.Base.++ "/createCreditNote"))) GHC.Base.mempty (GHC.Maybe.Just body) WeclappAPI.Common.RequestBodyEncodingJSON)
