-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation get_incomingGoods
module WeclappAPI.Operations.Get_incomingGoods where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified WeclappAPI.Common
import WeclappAPI.Types

-- | > GET /incomingGoods
-- 
-- query incomingGoods
get_incomingGoods :: forall m . WeclappAPI.Common.MonadHTTP m => Get_incomingGoodsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> WeclappAPI.Common.ClientT m (Network.HTTP.Client.Types.Response Get_incomingGoodsResponse) -- ^ Monadic computation which returns the result of the operation
get_incomingGoods parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Get_incomingGoodsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_incomingGoodsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                            Get_incomingGoodsResponseBody200)
                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (WeclappAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/incomingGoods") [WeclappAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_incomingGoodsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                             WeclappAPI.Common.QueryParameter (Data.Text.pack "pageSize") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_incomingGoodsParametersQueryPageSize parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                             WeclappAPI.Common.QueryParameter (Data.Text.pack "sort") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_incomingGoodsParametersQuerySort parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/incomingGoods.GET.parameters@ in the specification.
-- 
-- 
data Get_incomingGoodsParameters = Get_incomingGoodsParameters {
  -- | queryPage: Represents the parameter named \'page\'
  get_incomingGoodsParametersQueryPage :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | queryPageSize: Represents the parameter named \'pageSize\'
  , get_incomingGoodsParametersQueryPageSize :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | querySort: Represents the parameter named \'sort\'
  , get_incomingGoodsParametersQuerySort :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_incomingGoodsParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("queryPage" Data.Aeson.Types.ToJSON..= get_incomingGoodsParametersQueryPage obj : "queryPageSize" Data.Aeson.Types.ToJSON..= get_incomingGoodsParametersQueryPageSize obj : "querySort" Data.Aeson.Types.ToJSON..= get_incomingGoodsParametersQuerySort obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("queryPage" Data.Aeson.Types.ToJSON..= get_incomingGoodsParametersQueryPage obj) GHC.Base.<> (("queryPageSize" Data.Aeson.Types.ToJSON..= get_incomingGoodsParametersQueryPageSize obj) GHC.Base.<> ("querySort" Data.Aeson.Types.ToJSON..= get_incomingGoodsParametersQuerySort obj)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_incomingGoodsParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_incomingGoodsParameters" (\obj -> ((GHC.Base.pure Get_incomingGoodsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPageSize")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "querySort"))
-- | Create a new 'Get_incomingGoodsParameters' with all required fields.
mkGet_incomingGoodsParameters :: Get_incomingGoodsParameters
mkGet_incomingGoodsParameters = Get_incomingGoodsParameters{get_incomingGoodsParametersQueryPage = GHC.Maybe.Nothing,
                                                            get_incomingGoodsParametersQueryPageSize = GHC.Maybe.Nothing,
                                                            get_incomingGoodsParametersQuerySort = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'get_incomingGoods'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Get_incomingGoodsResponseError' is used.
data Get_incomingGoodsResponse =
   Get_incomingGoodsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Get_incomingGoodsResponse200 Get_incomingGoodsResponseBody200 -- ^ incomingGoods response
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/incomingGoods.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data Get_incomingGoodsResponseBody200 = Get_incomingGoodsResponseBody200 {
  -- | result
  get_incomingGoodsResponseBody200Result :: (GHC.Maybe.Maybe ([IncomingGoods]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_incomingGoodsResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("result" Data.Aeson.Types.ToJSON..= get_incomingGoodsResponseBody200Result obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("result" Data.Aeson.Types.ToJSON..= get_incomingGoodsResponseBody200Result obj)
instance Data.Aeson.Types.FromJSON.FromJSON Get_incomingGoodsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_incomingGoodsResponseBody200" (\obj -> GHC.Base.pure Get_incomingGoodsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "result"))
-- | Create a new 'Get_incomingGoodsResponseBody200' with all required fields.
mkGet_incomingGoodsResponseBody200 :: Get_incomingGoodsResponseBody200
mkGet_incomingGoodsResponseBody200 = Get_incomingGoodsResponseBody200{get_incomingGoodsResponseBody200Result = GHC.Maybe.Nothing}
-- | > GET /incomingGoods
-- 
-- The same as 'get_incomingGoods' but accepts an explicit configuration.
get_incomingGoodsWithConfiguration :: forall m . WeclappAPI.Common.MonadHTTP m => WeclappAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Get_incomingGoodsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Get_incomingGoodsResponse) -- ^ Monadic computation which returns the result of the operation
get_incomingGoodsWithConfiguration config
                                   parameters = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either Get_incomingGoodsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_incomingGoodsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                             Get_incomingGoodsResponseBody200)
                                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (WeclappAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/incomingGoods") [WeclappAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_incomingGoodsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                    WeclappAPI.Common.QueryParameter (Data.Text.pack "pageSize") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_incomingGoodsParametersQueryPageSize parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                    WeclappAPI.Common.QueryParameter (Data.Text.pack "sort") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_incomingGoodsParametersQuerySort parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /incomingGoods
-- 
-- The same as 'get_incomingGoods' but returns the raw 'Data.ByteString.Char8.ByteString'.
get_incomingGoodsRaw :: forall m . WeclappAPI.Common.MonadHTTP m => Get_incomingGoodsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> WeclappAPI.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_incomingGoodsRaw parameters = GHC.Base.id (WeclappAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/incomingGoods") [WeclappAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_incomingGoodsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                              WeclappAPI.Common.QueryParameter (Data.Text.pack "pageSize") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_incomingGoodsParametersQueryPageSize parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                              WeclappAPI.Common.QueryParameter (Data.Text.pack "sort") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_incomingGoodsParametersQuerySort parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /incomingGoods
-- 
-- The same as 'get_incomingGoods' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
get_incomingGoodsWithConfigurationRaw :: forall m . WeclappAPI.Common.MonadHTTP m => WeclappAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Get_incomingGoodsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_incomingGoodsWithConfigurationRaw config
                                      parameters = GHC.Base.id (WeclappAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/incomingGoods") [WeclappAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_incomingGoodsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                     WeclappAPI.Common.QueryParameter (Data.Text.pack "pageSize") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_incomingGoodsParametersQueryPageSize parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                     WeclappAPI.Common.QueryParameter (Data.Text.pack "sort") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_incomingGoodsParametersQuerySort parameters) (Data.Text.pack "form") GHC.Types.False])
