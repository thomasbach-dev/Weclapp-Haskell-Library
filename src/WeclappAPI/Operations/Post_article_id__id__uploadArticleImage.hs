-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation post_article_id__id__uploadArticleImage
module WeclappAPI.Operations.Post_article_id__id__uploadArticleImage where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified WeclappAPI.Common
import WeclappAPI.Types

-- | > POST /article/id/{id}/uploadArticleImage
-- 
-- 
post_article_id__id__uploadArticleImage :: forall m . WeclappAPI.Common.MonadHTTP m => Post_article_id__id__uploadArticleImageParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> WeclappAPI.Common.ClientT m (Network.HTTP.Client.Types.Response Post_article_id__id__uploadArticleImageResponse) -- ^ Monadic computation which returns the result of the operation
post_article_id__id__uploadArticleImage parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Post_article_id__id__uploadArticleImageResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Post_article_id__id__uploadArticleImageResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Post_article_id__id__uploadArticleImageResponseBody200)
                                                                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (WeclappAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/article/id/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ WeclappAPI.Common.stringifyModel (post_article_id__id__uploadArticleImageParametersPathId parameters))) GHC.Base.++ "/uploadArticleImage"))) [WeclappAPI.Common.QueryParameter (Data.Text.pack "name") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_article_id__id__uploadArticleImageParametersQueryName parameters)) (Data.Text.pack "form") GHC.Types.False,
eclappAPI.Common.QueryParameter (Data.Text.pack "mainImage") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> post_article_id__id__uploadArticleImageParametersQueryMainImage parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/article\/id\/{id}\/uploadArticleImage.POST.parameters@ in the specification.
-- 
-- 
data Post_article_id__id__uploadArticleImageParameters = Post_article_id__id__uploadArticleImageParameters {
  -- | pathId: Represents the parameter named \'id\'
  post_article_id__id__uploadArticleImageParametersPathId :: Data.Text.Internal.Text
  -- | queryMainImage: Represents the parameter named \'mainImage\'
  , post_article_id__id__uploadArticleImageParametersQueryMainImage :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | queryName: Represents the parameter named \'name\'
  , post_article_id__id__uploadArticleImageParametersQueryName :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Post_article_id__id__uploadArticleImageParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathId" Data.Aeson.Types.ToJSON..= post_article_id__id__uploadArticleImageParametersPathId obj : "queryMainImage" Data.Aeson.Types.ToJSON..= post_article_id__id__uploadArticleImageParametersQueryMainImage obj : "queryName" Data.Aeson.Types.ToJSON..= post_article_id__id__uploadArticleImageParametersQueryName obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathId" Data.Aeson.Types.ToJSON..= post_article_id__id__uploadArticleImageParametersPathId obj) GHC.Base.<> (("queryMainImage" Data.Aeson.Types.ToJSON..= post_article_id__id__uploadArticleImageParametersQueryMainImage obj) GHC.Base.<> ("queryName" Data.Aeson.Types.ToJSON..= post_article_id__id__uploadArticleImageParametersQueryName obj)))
instance Data.Aeson.Types.FromJSON.FromJSON Post_article_id__id__uploadArticleImageParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Post_article_id__id__uploadArticleImageParameters" (\obj -> ((GHC.Base.pure Post_article_id__id__uploadArticleImageParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryMainImage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryName"))
-- | Create a new 'Post_article_id__id__uploadArticleImageParameters' with all required fields.
mkPost_article_id__id__uploadArticleImageParameters :: Data.Text.Internal.Text -- ^ 'post_article_id__id__uploadArticleImageParametersPathId'
  -> Data.Text.Internal.Text -- ^ 'post_article_id__id__uploadArticleImageParametersQueryName'
  -> Post_article_id__id__uploadArticleImageParameters
mkPost_article_id__id__uploadArticleImageParameters post_article_id__id__uploadArticleImageParametersPathId post_article_id__id__uploadArticleImageParametersQueryName = Post_article_id__id__uploadArticleImageParameters{post_article_id__id__uploadArticleImageParametersPathId = post_article_id__id__uploadArticleImageParametersPathId,
                                                                                                                                                                                                                           post_article_id__id__uploadArticleImageParametersQueryMainImage = GHC.Maybe.Nothing,
                                                                                                                                                                                                                           post_article_id__id__uploadArticleImageParametersQueryName = post_article_id__id__uploadArticleImageParametersQueryName}
-- | Represents a response of the operation 'post_article_id__id__uploadArticleImage'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Post_article_id__id__uploadArticleImageResponseError' is used.
data Post_article_id__id__uploadArticleImageResponse =
   Post_article_id__id__uploadArticleImageResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Post_article_id__id__uploadArticleImageResponse200 Post_article_id__id__uploadArticleImageResponseBody200 -- ^ uploadArticleImage response
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/article\/id\/{id}\/uploadArticleImage.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data Post_article_id__id__uploadArticleImageResponseBody200 = Post_article_id__id__uploadArticleImageResponseBody200 {
  -- | result
  post_article_id__id__uploadArticleImageResponseBody200Result :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Post_article_id__id__uploadArticleImageResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("result" Data.Aeson.Types.ToJSON..= post_article_id__id__uploadArticleImageResponseBody200Result obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("result" Data.Aeson.Types.ToJSON..= post_article_id__id__uploadArticleImageResponseBody200Result obj)
instance Data.Aeson.Types.FromJSON.FromJSON Post_article_id__id__uploadArticleImageResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Post_article_id__id__uploadArticleImageResponseBody200" (\obj -> GHC.Base.pure Post_article_id__id__uploadArticleImageResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "result"))
-- | Create a new 'Post_article_id__id__uploadArticleImageResponseBody200' with all required fields.
mkPost_article_id__id__uploadArticleImageResponseBody200 :: Post_article_id__id__uploadArticleImageResponseBody200
mkPost_article_id__id__uploadArticleImageResponseBody200 = Post_article_id__id__uploadArticleImageResponseBody200{post_article_id__id__uploadArticleImageResponseBody200Result = GHC.Maybe.Nothing}
-- | > POST /article/id/{id}/uploadArticleImage
-- 
-- The same as 'post_article_id__id__uploadArticleImage' but accepts an explicit configuration.
post_article_id__id__uploadArticleImageWithConfiguration :: forall m . WeclappAPI.Common.MonadHTTP m => WeclappAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Post_article_id__id__uploadArticleImageParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Post_article_id__id__uploadArticleImageResponse) -- ^ Monadic computation which returns the result of the operation
post_article_id__id__uploadArticleImageWithConfiguration config
                                                         parameters = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either Post_article_id__id__uploadArticleImageResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Post_article_id__id__uploadArticleImageResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Post_article_id__id__uploadArticleImageResponseBody200)
                                                                                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (WeclappAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/article/id/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ WeclappAPI.Common.stringifyModel (post_article_id__id__uploadArticleImageParametersPathId parameters))) GHC.Base.++ "/uploadArticleImage"))) [WeclappAPI.Common.QueryParameter (Data.Text.pack "name") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_article_id__id__uploadArticleImageParametersQueryName parameters)) (Data.Text.pack "form") GHC.Types.False,
eclappAPI.Common.QueryParameter (Data.Text.pack "mainImage") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> post_article_id__id__uploadArticleImageParametersQueryMainImage parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > POST /article/id/{id}/uploadArticleImage
-- 
-- The same as 'post_article_id__id__uploadArticleImage' but returns the raw 'Data.ByteString.Char8.ByteString'.
post_article_id__id__uploadArticleImageRaw :: forall m . WeclappAPI.Common.MonadHTTP m => Post_article_id__id__uploadArticleImageParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> WeclappAPI.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
post_article_id__id__uploadArticleImageRaw parameters = GHC.Base.id (WeclappAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/article/id/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ WeclappAPI.Common.stringifyModel (post_article_id__id__uploadArticleImageParametersPathId parameters))) GHC.Base.++ "/uploadArticleImage"))) [WeclappAPI.Common.QueryParameter (Data.Text.pack "name") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_article_id__id__uploadArticleImageParametersQueryName parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          WeclappAPI.Common.QueryParameter (Data.Text.pack "mainImage") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> post_article_id__id__uploadArticleImageParametersQueryMainImage parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > POST /article/id/{id}/uploadArticleImage
-- 
-- The same as 'post_article_id__id__uploadArticleImage' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
post_article_id__id__uploadArticleImageWithConfigurationRaw :: forall m . WeclappAPI.Common.MonadHTTP m => WeclappAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Post_article_id__id__uploadArticleImageParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
post_article_id__id__uploadArticleImageWithConfigurationRaw config
                                                            parameters = GHC.Base.id (WeclappAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/article/id/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ WeclappAPI.Common.stringifyModel (post_article_id__id__uploadArticleImageParametersPathId parameters))) GHC.Base.++ "/uploadArticleImage"))) [WeclappAPI.Common.QueryParameter (Data.Text.pack "name") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_article_id__id__uploadArticleImageParametersQueryName parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 WeclappAPI.Common.QueryParameter (Data.Text.pack "mainImage") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> post_article_id__id__uploadArticleImageParametersQueryMainImage parameters) (Data.Text.pack "form") GHC.Types.False])
