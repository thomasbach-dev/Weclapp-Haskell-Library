-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation get_archivedEmail
module WeclappAPI.Operations.Get_archivedEmail where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified WeclappAPI.Common
import WeclappAPI.Types

-- | > GET /archivedEmail
-- 
-- query archivedEmail
get_archivedEmail :: forall m . WeclappAPI.Common.MonadHTTP m => Get_archivedEmailParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> WeclappAPI.Common.ClientT m (Network.HTTP.Client.Types.Response Get_archivedEmailResponse) -- ^ Monadic computation which returns the result of the operation
get_archivedEmail parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Get_archivedEmailResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_archivedEmailResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                            Get_archivedEmailResponseBody200)
                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (WeclappAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/archivedEmail") [WeclappAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_archivedEmailParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                             WeclappAPI.Common.QueryParameter (Data.Text.pack "pageSize") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_archivedEmailParametersQueryPageSize parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                             WeclappAPI.Common.QueryParameter (Data.Text.pack "sort") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_archivedEmailParametersQuerySort parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                             WeclappAPI.Common.QueryParameter (Data.Text.pack "entityId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_archivedEmailParametersQueryEntityId parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                             WeclappAPI.Common.QueryParameter (Data.Text.pack "entityName") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_archivedEmailParametersQueryEntityName parameters)) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/archivedEmail.GET.parameters@ in the specification.
-- 
-- 
data Get_archivedEmailParameters = Get_archivedEmailParameters {
  -- | queryEntityId: Represents the parameter named \'entityId\'
  get_archivedEmailParametersQueryEntityId :: Data.Text.Internal.Text
  -- | queryEntityName: Represents the parameter named \'entityName\'
  , get_archivedEmailParametersQueryEntityName :: Data.Text.Internal.Text
  -- | queryPage: Represents the parameter named \'page\'
  , get_archivedEmailParametersQueryPage :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | queryPageSize: Represents the parameter named \'pageSize\'
  , get_archivedEmailParametersQueryPageSize :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | querySort: Represents the parameter named \'sort\'
  , get_archivedEmailParametersQuerySort :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_archivedEmailParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("queryEntityId" Data.Aeson.Types.ToJSON..= get_archivedEmailParametersQueryEntityId obj : "queryEntityName" Data.Aeson.Types.ToJSON..= get_archivedEmailParametersQueryEntityName obj : "queryPage" Data.Aeson.Types.ToJSON..= get_archivedEmailParametersQueryPage obj : "queryPageSize" Data.Aeson.Types.ToJSON..= get_archivedEmailParametersQueryPageSize obj : "querySort" Data.Aeson.Types.ToJSON..= get_archivedEmailParametersQuerySort obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("queryEntityId" Data.Aeson.Types.ToJSON..= get_archivedEmailParametersQueryEntityId obj) GHC.Base.<> (("queryEntityName" Data.Aeson.Types.ToJSON..= get_archivedEmailParametersQueryEntityName obj) GHC.Base.<> (("queryPage" Data.Aeson.Types.ToJSON..= get_archivedEmailParametersQueryPage obj) GHC.Base.<> (("queryPageSize" Data.Aeson.Types.ToJSON..= get_archivedEmailParametersQueryPageSize obj) GHC.Base.<> ("querySort" Data.Aeson.Types.ToJSON..= get_archivedEmailParametersQuerySort obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON Get_archivedEmailParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_archivedEmailParameters" (\obj -> ((((GHC.Base.pure Get_archivedEmailParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryEntityId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryEntityName")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPageSize")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "querySort"))
-- | Create a new 'Get_archivedEmailParameters' with all required fields.
mkGet_archivedEmailParameters :: Data.Text.Internal.Text -- ^ 'get_archivedEmailParametersQueryEntityId'
  -> Data.Text.Internal.Text -- ^ 'get_archivedEmailParametersQueryEntityName'
  -> Get_archivedEmailParameters
mkGet_archivedEmailParameters get_archivedEmailParametersQueryEntityId get_archivedEmailParametersQueryEntityName = Get_archivedEmailParameters{get_archivedEmailParametersQueryEntityId = get_archivedEmailParametersQueryEntityId,
                                                                                                                                                get_archivedEmailParametersQueryEntityName = get_archivedEmailParametersQueryEntityName,
                                                                                                                                                get_archivedEmailParametersQueryPage = GHC.Maybe.Nothing,
                                                                                                                                                get_archivedEmailParametersQueryPageSize = GHC.Maybe.Nothing,
                                                                                                                                                get_archivedEmailParametersQuerySort = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'get_archivedEmail'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Get_archivedEmailResponseError' is used.
data Get_archivedEmailResponse =
   Get_archivedEmailResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Get_archivedEmailResponse200 Get_archivedEmailResponseBody200 -- ^ archivedEmail response
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/archivedEmail.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data Get_archivedEmailResponseBody200 = Get_archivedEmailResponseBody200 {
  -- | result
  get_archivedEmailResponseBody200Result :: (GHC.Maybe.Maybe ([ArchivedEmail]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_archivedEmailResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("result" Data.Aeson.Types.ToJSON..= get_archivedEmailResponseBody200Result obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("result" Data.Aeson.Types.ToJSON..= get_archivedEmailResponseBody200Result obj)
instance Data.Aeson.Types.FromJSON.FromJSON Get_archivedEmailResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_archivedEmailResponseBody200" (\obj -> GHC.Base.pure Get_archivedEmailResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "result"))
-- | Create a new 'Get_archivedEmailResponseBody200' with all required fields.
mkGet_archivedEmailResponseBody200 :: Get_archivedEmailResponseBody200
mkGet_archivedEmailResponseBody200 = Get_archivedEmailResponseBody200{get_archivedEmailResponseBody200Result = GHC.Maybe.Nothing}
-- | > GET /archivedEmail
-- 
-- The same as 'get_archivedEmail' but accepts an explicit configuration.
get_archivedEmailWithConfiguration :: forall m . WeclappAPI.Common.MonadHTTP m => WeclappAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Get_archivedEmailParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Get_archivedEmailResponse) -- ^ Monadic computation which returns the result of the operation
get_archivedEmailWithConfiguration config
                                   parameters = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either Get_archivedEmailResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_archivedEmailResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                             Get_archivedEmailResponseBody200)
                                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (WeclappAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/archivedEmail") [WeclappAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_archivedEmailParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                    WeclappAPI.Common.QueryParameter (Data.Text.pack "pageSize") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_archivedEmailParametersQueryPageSize parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                    WeclappAPI.Common.QueryParameter (Data.Text.pack "sort") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_archivedEmailParametersQuerySort parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                    WeclappAPI.Common.QueryParameter (Data.Text.pack "entityId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_archivedEmailParametersQueryEntityId parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                    WeclappAPI.Common.QueryParameter (Data.Text.pack "entityName") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_archivedEmailParametersQueryEntityName parameters)) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /archivedEmail
-- 
-- The same as 'get_archivedEmail' but returns the raw 'Data.ByteString.Char8.ByteString'.
get_archivedEmailRaw :: forall m . WeclappAPI.Common.MonadHTTP m => Get_archivedEmailParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> WeclappAPI.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_archivedEmailRaw parameters = GHC.Base.id (WeclappAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/archivedEmail") [WeclappAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_archivedEmailParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                              WeclappAPI.Common.QueryParameter (Data.Text.pack "pageSize") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_archivedEmailParametersQueryPageSize parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                              WeclappAPI.Common.QueryParameter (Data.Text.pack "sort") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_archivedEmailParametersQuerySort parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                              WeclappAPI.Common.QueryParameter (Data.Text.pack "entityId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_archivedEmailParametersQueryEntityId parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                              WeclappAPI.Common.QueryParameter (Data.Text.pack "entityName") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_archivedEmailParametersQueryEntityName parameters)) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /archivedEmail
-- 
-- The same as 'get_archivedEmail' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
get_archivedEmailWithConfigurationRaw :: forall m . WeclappAPI.Common.MonadHTTP m => WeclappAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Get_archivedEmailParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_archivedEmailWithConfigurationRaw config
                                      parameters = GHC.Base.id (WeclappAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/archivedEmail") [WeclappAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_archivedEmailParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                     WeclappAPI.Common.QueryParameter (Data.Text.pack "pageSize") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_archivedEmailParametersQueryPageSize parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                     WeclappAPI.Common.QueryParameter (Data.Text.pack "sort") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_archivedEmailParametersQuerySort parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                     WeclappAPI.Common.QueryParameter (Data.Text.pack "entityId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_archivedEmailParametersQueryEntityId parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                     WeclappAPI.Common.QueryParameter (Data.Text.pack "entityName") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_archivedEmailParametersQueryEntityName parameters)) (Data.Text.pack "form") GHC.Types.False])
