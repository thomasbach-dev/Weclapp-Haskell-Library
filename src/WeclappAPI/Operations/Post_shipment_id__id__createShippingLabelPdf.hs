-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation post_shipment_id__id__createShippingLabelPdf
module WeclappAPI.Operations.Post_shipment_id__id__createShippingLabelPdf where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified WeclappAPI.Common
import WeclappAPI.Types

-- | > POST /shipment/id/{id}/createShippingLabelPdf
-- 
-- 
post_shipment_id__id__createShippingLabelPdf :: forall m . WeclappAPI.Common.MonadHTTP m => Post_shipment_id__id__createShippingLabelPdfParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> WeclappAPI.Common.ClientT m (Network.HTTP.Client.Types.Response Post_shipment_id__id__createShippingLabelPdfResponse) -- ^ Monadic computation which returns the result of the operation
post_shipment_id__id__createShippingLabelPdf parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Post_shipment_id__id__createShippingLabelPdfResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Post_shipment_id__id__createShippingLabelPdfResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Post_shipment_id__id__createShippingLabelPdfResponseBody200)
                                                                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (WeclappAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/shipment/id/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ WeclappAPI.Common.stringifyModel (post_shipment_id__id__createShippingLabelPdfParametersPathId parameters))) GHC.Base.++ "/createShippingLabelPdf"))) [WeclappAPI.Common.QueryParameter (Data.Text.pack "name") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_shipment_id__id__createShippingLabelPdfParametersQueryName parameters)) (Data.Text.pack "form") GHC.Types.False,
eclappAPI.Common.QueryParameter (Data.Text.pack "description") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> post_shipment_id__id__createShippingLabelPdfParametersQueryDescription parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/shipment\/id\/{id}\/createShippingLabelPdf.POST.parameters@ in the specification.
-- 
-- 
data Post_shipment_id__id__createShippingLabelPdfParameters = Post_shipment_id__id__createShippingLabelPdfParameters {
  -- | pathId: Represents the parameter named \'id\'
  post_shipment_id__id__createShippingLabelPdfParametersPathId :: Data.Text.Internal.Text
  -- | queryDescription: Represents the parameter named \'description\'
  , post_shipment_id__id__createShippingLabelPdfParametersQueryDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | queryName: Represents the parameter named \'name\'
  , post_shipment_id__id__createShippingLabelPdfParametersQueryName :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Post_shipment_id__id__createShippingLabelPdfParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathId" Data.Aeson.Types.ToJSON..= post_shipment_id__id__createShippingLabelPdfParametersPathId obj : "queryDescription" Data.Aeson.Types.ToJSON..= post_shipment_id__id__createShippingLabelPdfParametersQueryDescription obj : "queryName" Data.Aeson.Types.ToJSON..= post_shipment_id__id__createShippingLabelPdfParametersQueryName obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathId" Data.Aeson.Types.ToJSON..= post_shipment_id__id__createShippingLabelPdfParametersPathId obj) GHC.Base.<> (("queryDescription" Data.Aeson.Types.ToJSON..= post_shipment_id__id__createShippingLabelPdfParametersQueryDescription obj) GHC.Base.<> ("queryName" Data.Aeson.Types.ToJSON..= post_shipment_id__id__createShippingLabelPdfParametersQueryName obj)))
instance Data.Aeson.Types.FromJSON.FromJSON Post_shipment_id__id__createShippingLabelPdfParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Post_shipment_id__id__createShippingLabelPdfParameters" (\obj -> ((GHC.Base.pure Post_shipment_id__id__createShippingLabelPdfParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryDescription")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryName"))
-- | Create a new 'Post_shipment_id__id__createShippingLabelPdfParameters' with all required fields.
mkPost_shipment_id__id__createShippingLabelPdfParameters :: Data.Text.Internal.Text -- ^ 'post_shipment_id__id__createShippingLabelPdfParametersPathId'
  -> Data.Text.Internal.Text -- ^ 'post_shipment_id__id__createShippingLabelPdfParametersQueryName'
  -> Post_shipment_id__id__createShippingLabelPdfParameters
mkPost_shipment_id__id__createShippingLabelPdfParameters post_shipment_id__id__createShippingLabelPdfParametersPathId post_shipment_id__id__createShippingLabelPdfParametersQueryName = Post_shipment_id__id__createShippingLabelPdfParameters{post_shipment_id__id__createShippingLabelPdfParametersPathId = post_shipment_id__id__createShippingLabelPdfParametersPathId,
                                                                                                                                                                                                                                               post_shipment_id__id__createShippingLabelPdfParametersQueryDescription = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                               post_shipment_id__id__createShippingLabelPdfParametersQueryName = post_shipment_id__id__createShippingLabelPdfParametersQueryName}
-- | Represents a response of the operation 'post_shipment_id__id__createShippingLabelPdf'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Post_shipment_id__id__createShippingLabelPdfResponseError' is used.
data Post_shipment_id__id__createShippingLabelPdfResponse =
   Post_shipment_id__id__createShippingLabelPdfResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Post_shipment_id__id__createShippingLabelPdfResponse200 Post_shipment_id__id__createShippingLabelPdfResponseBody200 -- ^ createShippingLabelPdf response
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/shipment\/id\/{id}\/createShippingLabelPdf.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data Post_shipment_id__id__createShippingLabelPdfResponseBody200 = Post_shipment_id__id__createShippingLabelPdfResponseBody200 {
  -- | result
  post_shipment_id__id__createShippingLabelPdfResponseBody200Result :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Post_shipment_id__id__createShippingLabelPdfResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("result" Data.Aeson.Types.ToJSON..= post_shipment_id__id__createShippingLabelPdfResponseBody200Result obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("result" Data.Aeson.Types.ToJSON..= post_shipment_id__id__createShippingLabelPdfResponseBody200Result obj)
instance Data.Aeson.Types.FromJSON.FromJSON Post_shipment_id__id__createShippingLabelPdfResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Post_shipment_id__id__createShippingLabelPdfResponseBody200" (\obj -> GHC.Base.pure Post_shipment_id__id__createShippingLabelPdfResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "result"))
-- | Create a new 'Post_shipment_id__id__createShippingLabelPdfResponseBody200' with all required fields.
mkPost_shipment_id__id__createShippingLabelPdfResponseBody200 :: Post_shipment_id__id__createShippingLabelPdfResponseBody200
mkPost_shipment_id__id__createShippingLabelPdfResponseBody200 = Post_shipment_id__id__createShippingLabelPdfResponseBody200{post_shipment_id__id__createShippingLabelPdfResponseBody200Result = GHC.Maybe.Nothing}
-- | > POST /shipment/id/{id}/createShippingLabelPdf
-- 
-- The same as 'post_shipment_id__id__createShippingLabelPdf' but accepts an explicit configuration.
post_shipment_id__id__createShippingLabelPdfWithConfiguration :: forall m . WeclappAPI.Common.MonadHTTP m => WeclappAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Post_shipment_id__id__createShippingLabelPdfParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Post_shipment_id__id__createShippingLabelPdfResponse) -- ^ Monadic computation which returns the result of the operation
post_shipment_id__id__createShippingLabelPdfWithConfiguration config
                                                              parameters = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either Post_shipment_id__id__createShippingLabelPdfResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Post_shipment_id__id__createShippingLabelPdfResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
ost_shipment_id__id__createShippingLabelPdfResponseBody200)
                                                                                                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (WeclappAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/shipment/id/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ WeclappAPI.Common.stringifyModel (post_shipment_id__id__createShippingLabelPdfParametersPathId parameters))) GHC.Base.++ "/createShippingLabelPdf"))) [WeclappAPI.Common.QueryParameter (Data.Text.pack "name") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_shipment_id__id__createShippingLabelPdfParametersQueryName parameters)) (Data.Text.pack "form") GHC.Types.False,
eclappAPI.Common.QueryParameter (Data.Text.pack "description") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> post_shipment_id__id__createShippingLabelPdfParametersQueryDescription parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > POST /shipment/id/{id}/createShippingLabelPdf
-- 
-- The same as 'post_shipment_id__id__createShippingLabelPdf' but returns the raw 'Data.ByteString.Char8.ByteString'.
post_shipment_id__id__createShippingLabelPdfRaw :: forall m . WeclappAPI.Common.MonadHTTP m => Post_shipment_id__id__createShippingLabelPdfParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> WeclappAPI.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
post_shipment_id__id__createShippingLabelPdfRaw parameters = GHC.Base.id (WeclappAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/shipment/id/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ WeclappAPI.Common.stringifyModel (post_shipment_id__id__createShippingLabelPdfParametersPathId parameters))) GHC.Base.++ "/createShippingLabelPdf"))) [WeclappAPI.Common.QueryParameter (Data.Text.pack "name") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_shipment_id__id__createShippingLabelPdfParametersQueryName parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         WeclappAPI.Common.QueryParameter (Data.Text.pack "description") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> post_shipment_id__id__createShippingLabelPdfParametersQueryDescription parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > POST /shipment/id/{id}/createShippingLabelPdf
-- 
-- The same as 'post_shipment_id__id__createShippingLabelPdf' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
post_shipment_id__id__createShippingLabelPdfWithConfigurationRaw :: forall m . WeclappAPI.Common.MonadHTTP m => WeclappAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Post_shipment_id__id__createShippingLabelPdfParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
post_shipment_id__id__createShippingLabelPdfWithConfigurationRaw config
                                                                 parameters = GHC.Base.id (WeclappAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/shipment/id/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ WeclappAPI.Common.stringifyModel (post_shipment_id__id__createShippingLabelPdfParametersPathId parameters))) GHC.Base.++ "/createShippingLabelPdf"))) [WeclappAPI.Common.QueryParameter (Data.Text.pack "name") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (post_shipment_id__id__createShippingLabelPdfParametersQueryName parameters)) (Data.Text.pack "form") GHC.Types.False,
eclappAPI.Common.QueryParameter (Data.Text.pack "description") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> post_shipment_id__id__createShippingLabelPdfParametersQueryDescription parameters) (Data.Text.pack "form") GHC.Types.False])
