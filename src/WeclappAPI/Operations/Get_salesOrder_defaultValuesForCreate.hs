-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation get_salesOrder_defaultValuesForCreate
module WeclappAPI.Operations.Get_salesOrder_defaultValuesForCreate where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified WeclappAPI.Common
import WeclappAPI.Types

-- | > GET /salesOrder/defaultValuesForCreate
-- 
-- 
get_salesOrder_defaultValuesForCreate :: forall m . WeclappAPI.Common.MonadHTTP m => Get_salesOrder_defaultValuesForCreateParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> WeclappAPI.Common.ClientT m (Network.HTTP.Client.Types.Response Get_salesOrder_defaultValuesForCreateResponse) -- ^ Monadic computation which returns the result of the operation
get_salesOrder_defaultValuesForCreate parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Get_salesOrder_defaultValuesForCreateResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_salesOrder_defaultValuesForCreateResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Get_salesOrder_defaultValuesForCreateResponseBody200)
                                                                                                                                                                                                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (WeclappAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/salesOrder/defaultValuesForCreate") [WeclappAPI.Common.QueryParameter (Data.Text.pack "customerId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_salesOrder_defaultValuesForCreateParametersQueryCustomerId parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         WeclappAPI.Common.QueryParameter (Data.Text.pack "responsibleUserId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_salesOrder_defaultValuesForCreateParametersQueryResponsibleUserId parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/salesOrder\/defaultValuesForCreate.GET.parameters@ in the specification.
-- 
-- 
data Get_salesOrder_defaultValuesForCreateParameters = Get_salesOrder_defaultValuesForCreateParameters {
  -- | queryCustomerId: Represents the parameter named \'customerId\'
  get_salesOrder_defaultValuesForCreateParametersQueryCustomerId :: Data.Text.Internal.Text
  -- | queryResponsibleUserId: Represents the parameter named \'responsibleUserId\'
  , get_salesOrder_defaultValuesForCreateParametersQueryResponsibleUserId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_salesOrder_defaultValuesForCreateParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("queryCustomerId" Data.Aeson.Types.ToJSON..= get_salesOrder_defaultValuesForCreateParametersQueryCustomerId obj : "queryResponsibleUserId" Data.Aeson.Types.ToJSON..= get_salesOrder_defaultValuesForCreateParametersQueryResponsibleUserId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("queryCustomerId" Data.Aeson.Types.ToJSON..= get_salesOrder_defaultValuesForCreateParametersQueryCustomerId obj) GHC.Base.<> ("queryResponsibleUserId" Data.Aeson.Types.ToJSON..= get_salesOrder_defaultValuesForCreateParametersQueryResponsibleUserId obj))
instance Data.Aeson.Types.FromJSON.FromJSON Get_salesOrder_defaultValuesForCreateParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_salesOrder_defaultValuesForCreateParameters" (\obj -> (GHC.Base.pure Get_salesOrder_defaultValuesForCreateParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryCustomerId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryResponsibleUserId"))
-- | Create a new 'Get_salesOrder_defaultValuesForCreateParameters' with all required fields.
mkGet_salesOrder_defaultValuesForCreateParameters :: Data.Text.Internal.Text -- ^ 'get_salesOrder_defaultValuesForCreateParametersQueryCustomerId'
  -> Get_salesOrder_defaultValuesForCreateParameters
mkGet_salesOrder_defaultValuesForCreateParameters get_salesOrder_defaultValuesForCreateParametersQueryCustomerId = Get_salesOrder_defaultValuesForCreateParameters{get_salesOrder_defaultValuesForCreateParametersQueryCustomerId = get_salesOrder_defaultValuesForCreateParametersQueryCustomerId,
                                                                                                                                                                   get_salesOrder_defaultValuesForCreateParametersQueryResponsibleUserId = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'get_salesOrder_defaultValuesForCreate'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Get_salesOrder_defaultValuesForCreateResponseError' is used.
data Get_salesOrder_defaultValuesForCreateResponse =
   Get_salesOrder_defaultValuesForCreateResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Get_salesOrder_defaultValuesForCreateResponse200 Get_salesOrder_defaultValuesForCreateResponseBody200 -- ^ defaultValuesForCreate response
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/salesOrder\/defaultValuesForCreate.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data Get_salesOrder_defaultValuesForCreateResponseBody200 = Get_salesOrder_defaultValuesForCreateResponseBody200 {
  -- | result
  get_salesOrder_defaultValuesForCreateResponseBody200Result :: (GHC.Maybe.Maybe SalesOrder)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_salesOrder_defaultValuesForCreateResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("result" Data.Aeson.Types.ToJSON..= get_salesOrder_defaultValuesForCreateResponseBody200Result obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("result" Data.Aeson.Types.ToJSON..= get_salesOrder_defaultValuesForCreateResponseBody200Result obj)
instance Data.Aeson.Types.FromJSON.FromJSON Get_salesOrder_defaultValuesForCreateResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_salesOrder_defaultValuesForCreateResponseBody200" (\obj -> GHC.Base.pure Get_salesOrder_defaultValuesForCreateResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "result"))
-- | Create a new 'Get_salesOrder_defaultValuesForCreateResponseBody200' with all required fields.
mkGet_salesOrder_defaultValuesForCreateResponseBody200 :: Get_salesOrder_defaultValuesForCreateResponseBody200
mkGet_salesOrder_defaultValuesForCreateResponseBody200 = Get_salesOrder_defaultValuesForCreateResponseBody200{get_salesOrder_defaultValuesForCreateResponseBody200Result = GHC.Maybe.Nothing}
-- | > GET /salesOrder/defaultValuesForCreate
-- 
-- The same as 'get_salesOrder_defaultValuesForCreate' but accepts an explicit configuration.
get_salesOrder_defaultValuesForCreateWithConfiguration :: forall m . WeclappAPI.Common.MonadHTTP m => WeclappAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Get_salesOrder_defaultValuesForCreateParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Get_salesOrder_defaultValuesForCreateResponse) -- ^ Monadic computation which returns the result of the operation
get_salesOrder_defaultValuesForCreateWithConfiguration config
                                                       parameters = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either Get_salesOrder_defaultValuesForCreateResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Get_salesOrder_defaultValuesForCreateResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Get_salesOrder_defaultValuesForCreateResponseBody200)
                                                                                                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (WeclappAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/salesOrder/defaultValuesForCreate") [WeclappAPI.Common.QueryParameter (Data.Text.pack "customerId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_salesOrder_defaultValuesForCreateParametersQueryCustomerId parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                WeclappAPI.Common.QueryParameter (Data.Text.pack "responsibleUserId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_salesOrder_defaultValuesForCreateParametersQueryResponsibleUserId parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /salesOrder/defaultValuesForCreate
-- 
-- The same as 'get_salesOrder_defaultValuesForCreate' but returns the raw 'Data.ByteString.Char8.ByteString'.
get_salesOrder_defaultValuesForCreateRaw :: forall m . WeclappAPI.Common.MonadHTTP m => Get_salesOrder_defaultValuesForCreateParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> WeclappAPI.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_salesOrder_defaultValuesForCreateRaw parameters = GHC.Base.id (WeclappAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/salesOrder/defaultValuesForCreate") [WeclappAPI.Common.QueryParameter (Data.Text.pack "customerId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_salesOrder_defaultValuesForCreateParametersQueryCustomerId parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                      WeclappAPI.Common.QueryParameter (Data.Text.pack "responsibleUserId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_salesOrder_defaultValuesForCreateParametersQueryResponsibleUserId parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /salesOrder/defaultValuesForCreate
-- 
-- The same as 'get_salesOrder_defaultValuesForCreate' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
get_salesOrder_defaultValuesForCreateWithConfigurationRaw :: forall m . WeclappAPI.Common.MonadHTTP m => WeclappAPI.Common.Configuration -- ^ The configuration to use in the request
  -> Get_salesOrder_defaultValuesForCreateParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_salesOrder_defaultValuesForCreateWithConfigurationRaw config
                                                          parameters = GHC.Base.id (WeclappAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/salesOrder/defaultValuesForCreate") [WeclappAPI.Common.QueryParameter (Data.Text.pack "customerId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (get_salesOrder_defaultValuesForCreateParametersQueryCustomerId parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                             WeclappAPI.Common.QueryParameter (Data.Text.pack "responsibleUserId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> get_salesOrder_defaultValuesForCreateParametersQueryResponsibleUserId parameters) (Data.Text.pack "form") GHC.Types.False])
